{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ProActions AI-Kit Step Configuration Schema",
  "description": "A single step in a workflow. The 'step' property determines the type and schema to use.",
  "type": "object",
  "required": ["step"],
  "discriminator": {
    "propertyName": "step"
  },
  "oneOf": [
    {
      "$ref": "#/definitions/steps/IF"
    },
    {
      "$ref": "#/definitions/steps/END_IF"
    },
    {
      "$ref": "#/definitions/steps/SET"
    },
    {
      "$ref": "#/definitions/steps/SWITCH"
    },
    {
      "$ref": "#/definitions/steps/WHILE"
    },
    {
      "$ref": "#/definitions/steps/SLEEP"
    },
    {
      "$ref": "#/definitions/steps/CALL_TEMPLATE"
    },
    {
      "$ref": "#/definitions/steps/SCRIPTING"
    },
    {
      "$ref": "#/definitions/steps/DEBUG"
    },
    {
      "$ref": "#/definitions/steps/PROMPT"
    },
    {
      "$ref": "#/definitions/steps/USER_SELECT"
    },
    {
      "$ref": "https://raw.githubusercontent.com/em-al-wi/proactions-schema/main/schema/partial-step.form.schema.json#/definitions/FORM"
    },
    {
      "$ref": "#/definitions/steps/FILE_UPLOAD"
    },
    {
      "$ref": "#/definitions/steps/HUB_COMPLETION"
    },
    {
      "$ref": "#/definitions/steps/DEEPL_TRANSLATE"
    },
    {
      "$ref": "#/definitions/steps/REST"
    },
    {
      "$ref": "#/definitions/steps/GET_TEXT_CONTENT"
    },
    {
      "$ref": "#/definitions/steps/GET_XML_CONTENT"
    },
    {
      "$ref": "#/definitions/steps/REPLACE_TEXT"
    },
    {
      "$ref": "#/definitions/steps/REPLACE_XML"
    },
    {
      "$ref": "#/definitions/steps/INSERT_TEXT"
    },
    {
      "$ref": "#/definitions/steps/INSERT_XML"
    },
    {
      "$ref": "#/definitions/steps/INSERT_LIST"
    },
    {
      "$ref": "#/definitions/steps/SHOW_RESPONSE"
    },
    {
      "$ref": "#/definitions/steps/SHOW_NOTIFICATION"
    },
    {
      "$ref": "#/definitions/steps/TO_LIST"
    },
    {
      "$ref": "#/definitions/steps/MARKDOWN_TO_HTML"
    },
    {
      "$ref": "#/definitions/steps/PARSE_JSON"
    },
    {
      "$ref": "#/definitions/steps/CLEAR_SELECTION"
    },
    {
      "$ref": "#/definitions/steps/WRITE_CLIPBOARD"
    },
    {
      "$ref": "#/definitions/steps/READ_CLIPBOARD"
    },
    {
      "$ref": "#/definitions/steps/SHOW_PROGRESS"
    },
    {
      "$ref": "#/definitions/steps/UPDATE_PROGRESS"
    },
    {
      "$ref": "#/definitions/steps/HIDE_PROGRESS"
    },
    {
      "$ref": "#/definitions/steps/SELECTED_OBJECT"
    },
    {
      "$ref": "#/definitions/steps/SET_METADATA"
    },
    {
      "$ref": "#/definitions/steps/DOWNLOAD"
    },
    {
      "$ref": "#/definitions/steps/OPENAI_ASSISTANT"
    },
    {
      "$ref": "#/definitions/steps/OPENAI_THREAD"
    },
    {
      "$ref": "#/definitions/steps/OPENAI_THREAD_FILES"
    },
    {
      "$ref": "#/definitions/steps/OPENAI_THREAD_MESSAGE"
    },
    {
      "$ref": "#/definitions/steps/OPENAI_DELETE_THREAD"
    },
    {
      "$ref": "#/definitions/steps/DEEPL_WRITE"
    },
    {
      "$ref": "#/definitions/steps/HUB_CONTENT_EXTRACTION"
    },
    {
      "$ref": "#/definitions/steps/HUB_TRANSCRIPTION"
    },
    {
      "$ref": "#/definitions/steps/HUB_SPEECH"
    },
    {
      "$ref": "#/definitions/steps/STABILITY_AI_UPSCALE"
    },
    {
      "$ref": "#/definitions/steps/STABILITY_AI_OUTPAINT"
    },
    {
      "$ref": "#/definitions/steps/STABILITY_AI_SEARCH_AND_REPLACE"
    },
    {
      "$ref": "#/definitions/steps/STABILITY_AI_SEARCH_AND_RECOLOR"
    },
    {
      "$ref": "#/definitions/steps/UPDATE_BINARY_CONTENT"
    },
    {
      "$ref": "#/definitions/steps/UPLOAD"
    },
    {
      "$ref": "#/definitions/steps/UPLOAD_IMAGE"
    },
    {
      "$ref": "#/definitions/steps/EDAPI_OBJECT_CONTENT"
    },
    {
      "$ref": "#/definitions/steps/OPENAI_COMPLETION"
    },
    {
      "$ref": "#/definitions/steps/OPENAI_TRANSCRIPTION"
    },
    {
      "$ref": "#/definitions/steps/OPENAI_SPEECH"
    },
    {
      "$ref": "#/definitions/steps/OPENAI_IMAGE_GENERATION"
    },
    {
      "$ref": "#/definitions/steps/HUB_IMAGE_GENERATION"
    },
    {
      "$ref": "#/definitions/steps/AZURE_OPENAI_COMPLETION"
    },
    {
      "$ref": "#/definitions/steps/AZURE_OPENAI_TRANSCRIPTION"
    },
    {
      "$ref": "#/definitions/steps/AZURE_OPENAI_SPEECH"
    },
    {
      "$ref": "#/definitions/steps/AZURE_OPENAI_IMAGE_GENERATION"
    },
    {
      "$ref": "#/definitions/steps/BRIGHTER_AI"
    },
    {
      "$ref": "#/definitions/steps/WORD_CLEANUP"
    },
    {
      "$ref": "#/definitions/steps/IMAGE_PICKER"
    },
    {
      "$ref": "#/definitions/steps/HUB_YOUTUBE_AUTH_INIT"
    },
    {
      "$ref": "#/definitions/steps/HUB_YOUTUBE_AUTH_LOGOUT"
    },
    {
      "$ref": "#/definitions/steps/HUB_YOUTUBE_AUTH_STATUS"
    },
    {
      "$ref": "#/definitions/steps/HUB_YOUTUBE_UPLOAD"
    },
    {
      "$ref": "#/definitions/steps/SANITIZE"
    },
    {
      "$ref": "#/definitions/steps/ELEVENLABS_TTS"
    },
    {
      "$ref": "#/definitions/steps/ELEVENLABS_STT"
    }
  ],
  "definitions": {
    "steps": {
      "IF": {
        "type": "object",
        "description": "Execute a conditional branch based on a condition",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["IF"],
            "description": "The IF step type"
          },
          "condition": {
            "type": "string",
            "description": "The condition to evaluate. Can be a template expression with {{ }} syntax."
          },
          "test": {
            "type": "string",
            "description": "Legacy alternative to condition. The condition to evaluate using JavaScript syntax."
          },
          "then": {
            "type": "array",
            "description": "Steps to execute if the condition is true",
            "items": {
              "$ref": "#"
            }
          },
          "else": {
            "type": "array",
            "description": "Steps to execute if the condition is false",
            "items": {
              "$ref": "#"
            }
          }
        },
        "oneOf": [
          {
            "required": ["condition"]
          },
          {
            "required": ["test"]
          }
        ]
      },
      "END_IF": {
        "type": "object",
        "description": "Ends the execution of a flow based on the given condition.",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["END_IF"],
            "description": "The END_IF step type"
          },
          "condition": {
            "type": "string",
            "description": "The condition to evaluate. Flow will be terminated gracefully when condition evaluates to true."
          }
        }
      },
      "SET": {
        "type": "object",
        "description": "Set a variable in the flowContext. All properties not listed above are treated as key-value pairs to set in the flowContext.",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["SET"],
            "description": "The SET step type"
          },
          "text": {
            "type": "string",
            "description": "Text value to set (can contain template expressions with {{ }} syntax)"
          },
          "expression": {
            "type": "string",
            "description": "Legacy. JavaScript expression to evaluate and store the result"
          },
          "raw_text": {
            "type": "string",
            "description": "Legacy. Raw text value to set without template processing"
          },
          "convertTo": {
            "type": "string",
            "enum": ["number"],
            "description": "Convert the value to the specified type"
          },
          "steps": {
            "type": "array",
            "description": "Legacy. Steps to execute and use their result as the value",
            "items": {
              "$ref": "#"
            }
          }
        },
        "additionalProperties": true
      },
      "SWITCH": {
        "type": "object",
        "description": "Execute different branches based on a value",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["SWITCH"],
            "description": "The SWITCH step type"
          },
          "condition": {
            "type": "string",
            "description": "Template expression to evaluate for the switch"
          },
          "switch": {
            "type": "string",
            "description": "Legacy alternative to condition. JavaScript expression to evaluate for the switch"
          },
          "cases": {
            "oneOf": [
              {
                "type": "object",
                "description": "Map of case values to steps. This is the preferred format.",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "$ref": "#"
                  }
                }
              },
              {
                "type": "array",
                "description": "Legacy format. Array of case objects with test and do properties",
                "items": {
                  "type": "object",
                  "required": ["test", "do"],
                  "properties": {
                    "test": {
                      "type": "string",
                      "description": "Case value or 'default' for the default case"
                    },
                    "do": {
                      "type": "array",
                      "description": "Steps to execute for this case",
                      "items": {
                        "$ref": "#"
                      }
                    }
                  }
                }
              }
            ],
            "description": "Case definitions for the switch statement"
          }
        },
        "oneOf": [
          {
            "required": ["condition", "cases"]
          },
          {
            "required": ["switch", "cases"]
          }
        ]
      },
      "WHILE": {
        "type": "object",
        "description": "Executes steps repeatedly while a condition is true",
        "required": ["step", "do"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["WHILE"],
            "description": "The WHILE step type"
          },
          "condition": {
            "type": "string",
            "description": "Template expression to evaluate for the loop condition"
          },
          "test": {
            "type": "string",
            "description": "Legacy alternative to condition. JavaScript expression to evaluate for the loop condition"
          },
          "do": {
            "type": "array",
            "description": "Steps to execute in each iteration of the loop",
            "items": {
              "$ref": "#"
            }
          }
        },
        "oneOf": [
          {
            "required": ["condition"]
          },
          {
            "required": ["test"]
          }
        ]
      },
      "CALL_TEMPLATE": {
        "type": "object",
        "description": "Call a predefined template",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["CALL_TEMPLATE"],
            "description": "The CALL_TEMPLATE step type"
          },
          "template": {
            "type": "string",
            "description": "Name of the template to call"
          },
          "name": {
            "type": "string",
            "description": "Alternative property to specify the template name"
          }
        },
        "oneOf": [
          {
            "required": ["template"]
          },
          {
            "required": ["name"]
          }
        ]
      },
      "SCRIPTING": {
        "type": "object",
        "description": "Execute custom JavaScript code",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["SCRIPTING"],
            "description": "The SCRIPTING step type"
          },
          "script": {
            "type": "string",
            "description": "JavaScript code to execute"
          },
          "template": {
            "type": "string",
            "description": "JavaScript template string to compile and execute"
          },
          "mode": {
            "type": "string",
            "enum": ["async", "sync"],
            "description": "Execution mode for the script"
          }
        },
        "oneOf": [
          {
            "required": ["script"]
          },
          {
            "required": ["template"]
          }
        ]
      },
      "DEBUG": {
        "type": "object",
        "description": "Debug step for development purposes",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["DEBUG"],
            "description": "The DEBUG step type"
          },
          "id": {
            "type": "string",
            "description": "Optional identifier for this debug step"
          },
          "omitDebugger": {
            "type": "boolean",
            "description": "If true, the debugger statement will not be executed"
          }
        }
      },
      "SLEEP": {
        "type": "object",
        "description": "Pause execution for a specified time",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["SLEEP"],
            "description": "The SLEEP step type"
          },
          "delay": {
            "type": "integer",
            "description": "Time to sleep in milliseconds (default: 1000)",
            "default": 1000
          }
        }
      },
      "PROMPT": {
        "type": "object",
        "description": "Prompt the user for text input",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["PROMPT", "USER_PROMPT"],
            "description": "The USER_PROMPT step type"
          },
          "promptText": {
            "type": "string",
            "description": "Text to display in the prompt dialog"
          }
        }
      },
      "USER_SELECT": {
        "type": "object",
        "description": "Prompt the user to select from a list of options",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["USER_SELECT"],
            "description": "The USER_SELECT step type"
          },
          "promptText": {
            "type": "string",
            "description": "Text to display in the selection dialog"
          },
          "infoTitle": {
            "type": "string",
            "description": "Title for additional information"
          },
          "infoText": {
            "type": "string",
            "description": "Additional information text"
          }
        }
      },
      "FILE_UPLOAD": {
        "type": "object",
        "description": "Prompt the user to upload a file",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["FILE_UPLOAD", "USER_FILE_UPLOAD"],
            "description": "The FILE_UPLOAD step type"
          },
          "promptText": {
            "type": "string",
            "description": "Text to display in the upload dialog"
          },
          "accept": {
            "type": "string",
            "description": "MIME types or file extensions to accept (e.g., '.jpg,.png,.pdf')"
          },
          "fileTypes": {
            "type": "array",
            "description": "Array of MIME types to accept",
            "items": {
              "type": "string"
            }
          },
          "maxSize": {
            "type": "integer",
            "description": "Maximum file size in bytes"
          },
          "outputs": {
            "type": "array",
            "description": "Output parameters from this step. By default, uploaded file will be stored in 'file' property of flowContext.",
            "items": {
              "$ref": "#/definitions/inOutConfig"
            }
          }
        }
      },
      "HUB_COMPLETION": {
        "type": "object",
        "description": "Generate text using the AI Hub completion API",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["HUB_COMPLETION"],
            "description": "The HUB_COMPLETION step type"
          },
          "instruction": {
            "type": "string",
            "description": "User prompt for the AI request. Supports template expressions with {{ }} syntax."
          },
          "behavior": {
            "type": "string",
            "description": "System prompt that defines the AI's behavior"
          },
          "service": {
            "type": "string",
            "description": "Service name to use (references a service from SERVICES section)"
          },
          "response_format": {
            "oneOf": [
              {
                "type": "string",
                "enum": ["list"],
                "description": "Simple response format specification"
              },
              {
                "type": "object",
                "description": "Schema for structured output",
                "required": ["name", "schema"],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the schema"
                  },
                  "schema": {
                    "type": "object",
                    "description": "JSON schema definition"
                  }
                }
              }
            ]
          }
        }
      },
      "DEEPL_TRANSLATE": {
        "type": "object",
        "description": "Translate text using DeepL",
        "required": ["step", "target_lang"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["DEEPL_TRANSLATE"],
            "description": "The DEEPL_TRANSLATE step type"
          },
          "instruction": {
            "type": "string",
            "description": "Text content to translate"
          },
          "target_lang": {
            "type": "string",
            "description": "Target language code (e.g., 'en', 'de', 'fr')"
          },
          "source_lang": {
            "type": "string",
            "description": "Source language code (optional)"
          },
          "formality": {
            "type": "string",
            "enum": ["default", "more", "less", "prefer_more", "prefer_less"],
            "description": "Formality level for the translation"
          },
          "tag_handling": {
            "type": "string",
            "enum": ["xml", "html"],
            "description": "Tag handling mode"
          },
          "replaceXmlLang": {
            "type": "string",
            "description": "Replace xml:lang attribute with this value"
          },
          "service": {
            "type": "string",
            "description": "Service name to use (references a service from SERVICES section)"
          }
        },
        "additionalProperties": true
      },
      "DEEPL_WRITE": {
        "type": "object",
        "description": "Improve text using DeepL Write (rephrase, grammatical corrections, etc.)",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["DEEPL_WRITE"],
            "description": "The DEEPL_WRITE step type"
          },
          "instruction": {
            "type": "string",
            "description": "Text content to improve or rephrase"
          },
          "target_lang": {
            "type": "string",
            "description": "Target language code (optional)"
          },
          "writing_style": {
            "type": "string",
            "description": "Writing style preference"
          },
          "tone": {
            "type": "string",
            "description": "Tone preference for the rephrased text"
          },
          "service": {
            "type": "string",
            "description": "Service name to use (references a service from SERVICES section)"
          }
        }
      },
      "REST": {
        "type": "object",
        "description": "Make an HTTP request to a REST API",
        "required": ["step", "url"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["REST"],
            "description": "The REST step type"
          },
          "url": {
            "type": "string",
            "description": "URL to request"
          },
          "method": {
            "type": "string",
            "enum": ["GET", "POST", "PUT", "DELETE", "PATCH"],
            "description": "HTTP method",
            "default": "GET"
          },
          "headers": {
            "type": "object",
            "description": "HTTP headers",
            "additionalProperties": {
              "type": "string"
            }
          },
          "body": {
            "description": "Request body for POST, PUT, etc.",
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "type": "string"
              }
            ]
          },
          "formData": {
            "description": "Request form data for POST, PUT, etc.",
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "type": "string"
              }
            ]
          },
          "parameters": {
            "type": "object",
            "description": "URL parameters to append to the request",
            "additionalProperties": {
              "type": ["string", "number"]
            }
          },
          "requestOptions": {
            "type": "object",
            "description": "Additional fetch request options",
            "additionalProperties": true
          },
          "outputs": {
            "type": "array",
            "description": "Output parameters from this step. By default, response text will be stored in 'text' property of flowContext.",
            "items": {
              "$ref": "#/definitions/inOutConfig"
            }
          }
        }
      },
      "GET_TEXT_CONTENT": {
        "type": "object",
        "description": "Read document text content",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["GET_TEXT_CONTENT"],
            "description": "The GET_TEXT_CONTENT step type"
          },
          "at": {
            "type": "string",
            "enum": ["XPATH", "CURSOR", "CURSOR_PARAGRAPH"],
            "description": "Position reference for where to get content. If not specified, reads full document text."
          },
          "xpath": {
            "type": "string",
            "description": "XPath selector for targeting elements"
          }
        },
        "allOf": [
          {
            "if": {
              "properties": {
                "at": {
                  "const": "XPATH"
                }
              },
              "required": ["at"]
            },
            "then": {
              "required": ["xpath"]
            }
          }
        ]
      },
      "GET_XML_CONTENT": {
        "type": "object",
        "description": "Read document XML content",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["GET_XML_CONTENT"],
            "description": "The GET_XML_CONTENT step type"
          },
          "at": {
            "type": "string",
            "enum": ["XPATH", "CURSOR", "CURSOR_PARAGRAPH"],
            "description": "Position reference for where to get content. If not specified, reads full document XML."
          },
          "xpath": {
            "type": "string",
            "description": "XPath selector for targeting elements"
          }
        },
        "allOf": [
          {
            "if": {
              "properties": {
                "at": {
                  "const": "XPATH"
                }
              },
              "required": ["at"]
            },
            "then": {
              "required": ["xpath"]
            }
          }
        ]
      },
      "REPLACE_TEXT": {
        "type": "object",
        "description": "Replace text at a specific position",
        "required": ["step", "at"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["REPLACE_TEXT"],
            "description": "The REPLACE_TEXT step type"
          },
          "at": {
            "type": "string",
            "enum": ["CURSOR", "CURSOR_PARAGRAPH", "XPATH"],
            "description": "Position reference for where to replace"
          },
          "xpath": {
            "type": "string",
            "description": "XPath selector for targeting elements"
          },
          "in": {
            "type": "string",
            "description": "Content to insert (with template expression support using {{ }} syntax)"
          },
          "forceWrite": {
            "type": "boolean",
            "description": "Whether to force writing even in read-only mode"
          }
        },
        "allOf": [
          {
            "if": {
              "properties": {
                "at": {
                  "const": "XPATH"
                }
              }
            },
            "then": {
              "required": ["xpath"]
            }
          }
        ]
      },
      "REPLACE_XML": {
        "type": "object",
        "description": "Replace XML at a specific position",
        "required": ["step", "at"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["REPLACE_XML"],
            "description": "The REPLACE_XML step type"
          },
          "at": {
            "type": "string",
            "enum": ["CURSOR", "CURSOR_PARAGRAPH", "XPATH"],
            "description": "Position reference for where to replace"
          },
          "xpath": {
            "type": "string",
            "description": "XPath selector for targeting elements"
          },
          "in": {
            "type": "string",
            "description": "XML content to replace with (with template support)"
          },
          "forceWrite": {
            "type": "boolean",
            "description": "Whether to force writing even in read-only mode"
          }
        },
        "allOf": [
          {
            "if": {
              "properties": {
                "at": {
                  "const": "XPATH"
                }
              }
            },
            "then": {
              "required": ["xpath"]
            }
          }
        ]
      },
      "INSERT_TEXT": {
        "type": "object",
        "description": "Insert text at a specific position",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["INSERT_TEXT"],
            "description": "The INSERT_TEXT step type"
          },
          "at": {
            "type": "string",
            "enum": ["CURSOR", "XPATH"],
            "description": "Position reference for where to insert",
            "default": "CURSOR"
          },
          "xpath": {
            "type": "string",
            "description": "XPath selector for targeting elements"
          },
          "in": {
            "type": "string",
            "description": "Content to insert (with template support)"
          },
          "forceWrite": {
            "type": "boolean",
            "description": "Whether to force writing even in read-only mode"
          }
        },
        "allOf": [
          {
            "if": {
              "properties": {
                "at": {
                  "const": "XPATH"
                }
              }
            },
            "then": {
              "required": ["xpath"]
            }
          }
        ]
      },
      "INSERT_XML": {
        "type": "object",
        "description": "Insert XML at a specific position",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["INSERT_XML"],
            "description": "The INSERT_XML step type"
          },
          "at": {
            "type": "string",
            "enum": ["CURSOR", "XPATH"],
            "description": "Position reference for where to insert",
            "default": "CURSOR"
          },
          "xpath": {
            "type": "string",
            "description": "XPath selector (required only when at='XPATH')"
          },
          "in": {
            "type": "string",
            "description": "Content to insert (with template expression support)"
          },
          "position": {
            "type": "string",
            "enum": ["inline", "insertBefore", "insertAfter", "replace"],
            "description": "How to position the XML relative to the target"
          },
          "forceWrite": {
            "type": "boolean",
            "description": "Whether to force writing even in read-only mode"
          }
        },
        "allOf": [
          {
            "if": {
              "properties": {
                "at": {
                  "const": "XPATH"
                }
              },
              "required": ["at"]
            },
            "then": {
              "required": ["xpath"]
            }
          }
        ]
      },
      "INSERT_LIST": {
        "type": "object",
        "description": "Insert a list at a specific position",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["INSERT_LIST"],
            "description": "The INSERT_LIST step type"
          },
          "at": {
            "type": "string",
            "enum": ["CURSOR", "XPATH"],
            "description": "Position reference for where to insert",
            "default": "CURSOR"
          },
          "xpath": {
            "type": "string",
            "description": "XPath selector for targeting elements"
          },
          "containerElement": {
            "type": "string",
            "description": "Container element type (default: ul)",
            "default": "ul"
          },
          "listItemElement": {
            "type": "string",
            "description": "List item element type (default: li)",
            "default": "li"
          },
          "omitContainer": {
            "type": "boolean",
            "description": "Whether to omit the container element"
          },
          "position": {
            "type": "string",
            "enum": ["inline", "insertBefore", "insertAfter", "replace"],
            "description": "How to position the list relative to the target"
          }
        },
        "allOf": [
          {
            "if": {
              "properties": {
                "at": {
                  "const": "XPATH"
                }
              }
            },
            "then": {
              "required": ["xpath"]
            }
          }
        ]
      },
      "SHOW_RESPONSE": {
        "type": "object",
        "description": "Show a response modal to the user",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["SHOW_RESPONSE"],
            "description": "The SHOW_RESPONSE step type"
          },
          "mode": {
            "type": "string",
            "enum": ["text", "html"],
            "description": "Display mode for the response",
            "default": "text"
          }
        }
      },
      "SHOW_NOTIFICATION": {
        "type": "object",
        "description": "Show a notification to the user",
        "required": ["step", "message"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["SHOW_NOTIFICATION"],
            "description": "The SHOW_NOTIFICATION step type"
          },
          "notificationType": {
            "type": "string",
            "enum": ["info", "warning", "error", "message", "task", "success"],
            "description": "Type of notification to display",
            "default": "info"
          },
          "message": {
            "type": "string",
            "description": "Message text to display"
          },
          "title": {
            "type": "string",
            "description": "Title for the notification"
          }
        }
      },
      "TO_LIST": {
        "type": "object",
        "description": "Convert text to a list. The text from the flowContext.text will be processed and the result will be stored in flowContext.list.",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["TO_LIST"],
            "description": "The TO_LIST step type"
          }
        }
      },
      "MARKDOWN_TO_HTML": {
        "type": "object",
        "description": "Convert Markdown text to HTML. The text from the flowContext.text will be processed and the result will be stored in flowContext.text.",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["MARKDOWN_TO_HTML"],
            "description": "The MARKDOWN_TO_HTML step type"
          }
        }
      },
      "PARSE_JSON": {
        "type": "object",
        "description": "Parse JSON text to an object. The text from the flowContext.text will be processed and the result will be stored in flowContext.object.",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["PARSE_JSON"],
            "description": "The PARSE_JSON step type"
          }
        }
      },
      "CLEAR_SELECTION": {
        "type": "object",
        "description": "Clear the current text selection",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["CLEAR_SELECTION"],
            "description": "The CLEAR_SELECTION step type"
          },
          "cursorPosition": {
            "type": "string",
            "enum": ["anchorStart", "anchorEnd"],
            "description": "Where to place the cursor after clearing the selection"
          }
        }
      },
      "WRITE_CLIPBOARD": {
        "type": "object",
        "description": "Write data to the user's clipboard. The text from the flowContext.text will be written to the clipboard.",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["WRITE_CLIPBOARD"],
            "description": "The WRITE_CLIPBOARD step type"
          }
        }
      },
      "READ_CLIPBOARD": {
        "type": "object",
        "description": "Read data from the user's clipboard and store it in flowContext.text.",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["READ_CLIPBOARD"],
            "description": "The READ_CLIPBOARD step type"
          }
        }
      },
      "SHOW_PROGRESS": {
        "type": "object",
        "description": "Show a progress bar",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["SHOW_PROGRESS"],
            "description": "The SHOW_PROGRESS step type"
          },
          "status": {
            "type": "string",
            "description": "Status text to display"
          },
          "position": {
            "type": "string",
            "enum": ["top", "bottom"],
            "description": "Position of the progress bar",
            "default": "bottom"
          },
          "autoHide": {
            "type": "boolean",
            "description": "Whether to automatically hide the progress bar",
            "default": true
          }
        }
      },
      "UPDATE_PROGRESS": {
        "type": "object",
        "description": "Update an existing progress bar",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["UPDATE_PROGRESS"],
            "description": "The UPDATE_PROGRESS step type"
          },
          "status": {
            "type": "string",
            "description": "Status text to display"
          },
          "percentage": {
            "type": ["integer", "string"],
            "description": "Completion percentage (0-100)"
          }
        }
      },
      "HIDE_PROGRESS": {
        "type": "object",
        "description": "Hide the progress bar",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["HIDE_PROGRESS"],
            "description": "The HIDE_PROGRESS step type"
          }
        }
      },
      "SELECTED_OBJECT": {
        "type": "object",
        "description": "Get information about currently selected object. By default, stores object ID in flowContext.text.",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["SELECTED_OBJECT"],
            "description": "The SELECTED_OBJECT step type"
          },
          "outputs": {
            "type": "array",
            "description": "Output parameters from this step",
            "items": {
              "$ref": "#/definitions/inOutConfig"
            }
          }
        }
      },
      "SET_METADATA": {
        "type": "object",
        "description": "Set metadata in the object panel",
        "required": ["step", "selector"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["SET_METADATA"],
            "description": "The SET_METADATA step type"
          },
          "selector": {
            "type": "string",
            "description": "CSS selector for the target input element"
          }
        }
      },
      "DOWNLOAD": {
        "type": "object",
        "description": "Download a file to the user's device. Uses text from flowContext.text or blob from flowContext.blob as the content.",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["DOWNLOAD"],
            "description": "The DOWNLOAD step type"
          },
          "filename": {
            "type": "string",
            "description": "Name for the downloaded file"
          },
          "contentType": {
            "type": "string",
            "description": "MIME type for the download"
          }
        }
      },
      "OPENAI_ASSISTANT": {
        "type": "object",
        "description": "Create or retrieve an OpenAI Assistant",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["OPENAI_ASSISTANT"],
            "description": "The OPENAI_ASSISTANT step type"
          },
          "assistantId": {
            "type": "string",
            "description": "ID of an existing assistant to use"
          },
          "reuse": {
            "type": "boolean",
            "description": "Whether to reuse an existing assistant"
          },
          "storeIn": {
            "type": "string",
            "enum": ["page", "session", "browser"],
            "description": "Storage location for the assistant ID"
          },
          "instruction": {
            "type": "string",
            "description": "Instructions for the assistant"
          },
          "model": {
            "type": "string",
            "description": "Model to use for the assistant (default: gpt-4o)",
            "default": "gpt-4o"
          },
          "service": {
            "type": "string",
            "description": "Service name to use (references a service from SERVICES section)"
          }
        }
      },
      "OPENAI_THREAD": {
        "type": "object",
        "description": "Create or retrieve an OpenAI Thread",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["OPENAI_THREAD"],
            "description": "The OPENAI_THREAD step type"
          },
          "reuse": {
            "type": "boolean",
            "description": "Whether to reuse an existing thread"
          },
          "storeIn": {
            "type": "string",
            "enum": ["page", "session", "browser"],
            "description": "Storage location for the thread ID"
          },
          "service": {
            "type": "string",
            "description": "Service name to use (references a service from SERVICES section)"
          }
        }
      },
      "OPENAI_DELETE_THREAD": {
        "type": "object",
        "description": "Delete an OpenAI Thread",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["OPENAI_DELETE_THREAD"],
            "description": "The OPENAI_DELETE_THREAD step type"
          },
          "service": {
            "type": "string",
            "description": "Service name to use (references a service from SERVICES section)"
          }
        }
      },
      "OPENAI_THREAD_FILES": {
        "type": "object",
        "description": "Upload files to a vector store and associate with a thread",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["OPENAI_THREAD_FILES"],
            "description": "The OPENAI_THREAD_FILES step type"
          },
          "name": {
            "type": "string",
            "description": "Name for the vector store"
          },
          "replaceStores": {
            "type": "boolean",
            "description": "Whether to replace existing vector stores",
            "default": false
          },
          "expires_after": {
            "type": "integer",
            "description": "Days after which the vector store expires",
            "default": 1
          },
          "service": {
            "type": "string",
            "description": "Service name to use (references a service from SERVICES section)"
          }
        }
      },
      "OPENAI_THREAD_MESSAGE": {
        "type": "object",
        "description": "Send a message to an OpenAI Thread and process with an Assistant",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["OPENAI_THREAD_MESSAGE"],
            "description": "The OPENAI_THREAD_MESSAGE step type"
          },
          "instruction": {
            "type": "string",
            "description": "Message to send to the assistant"
          },
          "service": {
            "type": "string",
            "description": "Service name to use (references a service from SERVICES section)"
          }
        }
      },
      "HUB_CONTENT_EXTRACTION": {
        "type": "object",
        "description": "Extract content from a specified URL",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["HUB_CONTENT_EXTRACTION"],
            "description": "The HUB_CONTENT_EXTRACTION step type"
          },
          "instruction": {
            "type": "string",
            "description": "URL from which to extract content"
          },
          "service": {
            "type": "string",
            "description": "Service name to use (references a service from SERVICES section)"
          }
        }
      },
      "HUB_TRANSCRIPTION": {
        "type": "object",
        "description": "Transcribe audio to text using Hub endpoint",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["HUB_TRANSCRIPTION"],
            "description": "The HUB_TRANSCRIPTION step type"
          },
          "instruction": {
            "type": "string",
            "description": "Optional prompt to guide the transcription"
          },
          "language": {
            "type": "string",
            "description": "Language code for the audio content"
          },
          "temperature": {
            "type": "number",
            "description": "Temperature for transcription model",
            "minimum": 0,
            "maximum": 1
          },
          "service": {
            "type": "string",
            "description": "Service name to use (references a service from SERVICES section)"
          }
        }
      },
      "HUB_SPEECH": {
        "type": "object",
        "description": "Convert text to speech using Hub endpoint",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["HUB_SPEECH"],
            "description": "The HUB_SPEECH step type"
          },
          "model": {
            "type": "string",
            "description": "Speech model to use (default: tts-1)",
            "default": "tts-1"
          },
          "voice": {
            "type": "string",
            "description": "Voice to use for speech (e.g., alloy, echo, fable, etc.)",
            "default": "alloy"
          },
          "response_format": {
            "type": "string",
            "description": "Audio format for output",
            "enum": ["mp3", "opus", "aac", "flac"],
            "default": "mp3"
          },
          "speed": {
            "type": "number",
            "description": "Speed multiplier for the speech",
            "default": 1.0
          },
          "mime_type": {
            "type": "string",
            "description": "MIME type for the output audio file",
            "default": "audio/mp3"
          },
          "service": {
            "type": "string",
            "description": "Service name to use (references a service from SERVICES section)"
          }
        }
      },
      "STABILITY_AI_UPSCALE": {
        "type": "object",
        "description": "Upscale an image using Stability AI",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["STABILITY_AI_UPSCALE"],
            "description": "The STABILITY_AI_UPSCALE step type"
          },
          "prompt": {
            "type": "string",
            "description": "Description to guide the upscaling process"
          },
          "service": {
            "type": "string",
            "description": "Service name to use (references a service from SERVICES section)"
          }
        }
      },
      "STABILITY_AI_OUTPAINT": {
        "type": "object",
        "description": "Extend an image in specified directions using Stability AI",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["STABILITY_AI_OUTPAINT"],
            "description": "The STABILITY_AI_OUTPAINT step type"
          },
          "left": {
            "type": "number",
            "description": "Number of pixels to extend the image to the left",
            "default": 0
          },
          "right": {
            "type": "number",
            "description": "Number of pixels to extend the image to the right",
            "default": 0
          },
          "up": {
            "type": "number",
            "description": "Number of pixels to extend the image upward",
            "default": 0
          },
          "down": {
            "type": "number",
            "description": "Number of pixels to extend the image downward",
            "default": 0
          },
          "service": {
            "type": "string",
            "description": "Service name to use (references a service from SERVICES section)"
          }
        }
      },
      "STABILITY_AI_SEARCH_AND_REPLACE": {
        "type": "object",
        "description": "Search for elements in an image and replace them using Stability AI",
        "required": ["step", "prompt", "search_prompt"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["STABILITY_AI_SEARCH_AND_REPLACE"],
            "description": "The STABILITY_AI_SEARCH_AND_REPLACE step type"
          },
          "prompt": {
            "type": "string",
            "description": "Description of what to replace the searched elements with"
          },
          "search_prompt": {
            "type": "string",
            "description": "Description of what to search for in the image"
          },
          "service": {
            "type": "string",
            "description": "Service name to use (references a service from SERVICES section)"
          }
        }
      },
      "STABILITY_AI_SEARCH_AND_RECOLOR": {
        "type": "object",
        "description": "Search for elements in an image and recolor them using Stability AI",
        "required": ["step", "prompt", "select_prompt"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["STABILITY_AI_SEARCH_AND_RECOLOR"],
            "description": "The STABILITY_AI_SEARCH_AND_RECOLOR step type"
          },
          "prompt": {
            "type": "string",
            "description": "Description of the color to apply to the selected elements"
          },
          "select_prompt": {
            "type": "string",
            "description": "Description of what to select for recoloring in the image"
          },
          "service": {
            "type": "string",
            "description": "Service name to use (references a service from SERVICES section)"
          }
        }
      },
      "UPDATE_BINARY_CONTENT": {
        "type": "object",
        "description": "Update binary content of an existing object in the CMS",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["UPDATE_BINARY_CONTENT"],
            "description": "The UPDATE_BINARY_CONTENT step type"
          },
          "inputs": {
            "type": "array",
            "description": "Input parameters for this step. Requires a 'blob' type input for the content to update.",
            "items": {
              "$ref": "#/definitions/inOutConfig"
            }
          }
        }
      },
      "UPLOAD": {
        "type": "object",
        "description": "Upload content to the CMS",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["UPLOAD"],
            "description": "The UPLOAD step type"
          },
          "options": {
            "type": "object",
            "description": "Upload options",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name for the uploaded file"
              },
              "workFolder": {
                "type": "string",
                "description": "Work folder path"
              },
              "folderPath": {
                "type": "string",
                "description": "Target folder path"
              },
              "type": {
                "type": "string",
                "description": "Object type",
                "default": "File"
              },
              "attributes": {
                "type": "string",
                "description": "Custom attributes for the object"
              },
              "systemAttributes": {
                "type": "string",
                "description": "System attributes for the object"
              },
              "application": {
                "type": "string",
                "description": "Application name",
                "default": "Swing ProActions"
              },
              "options": {
                "type": "object",
                "description": "Additional upload options",
                "properties": {
                  "showPath": {
                    "type": "boolean",
                    "description": "Whether to show the path"
                  },
                  "showSystemAttributes": {
                    "type": "boolean",
                    "description": "Whether to show system attributes"
                  },
                  "showAttributes": {
                    "type": "boolean",
                    "description": "Whether to show attributes"
                  },
                  "createMode": {
                    "type": "string",
                    "description": "Creation mode",
                    "enum": ["AUTO_RENAME", "OVERWRITE", "FAIL_IF_EXISTS"],
                    "default": "AUTO_RENAME"
                  }
                }
              }
            }
          },
          "type": {
            "type": "string",
            "description": "Object type",
            "default": "File"
          },
          "filename": {
            "type": "string",
            "description": "Name for the uploaded file"
          },
          "basetype": {
            "type": "string",
            "description": "Base folder type"
          },
          "createMode": {
            "type": "string",
            "description": "Creation mode",
            "enum": ["AUTO_RENAME", "OVERWRITE", "FAIL_IF_EXISTS"],
            "default": "AUTO_RENAME"
          }
        }
      },
      "UPLOAD_IMAGE": {
        "type": "object",
        "description": "Upload an image to the CMS from a URL",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["UPLOAD_IMAGE"],
            "description": "The UPLOAD_IMAGE step type"
          },
          "objectType": {
            "type": "string",
            "description": "Type of object to create in the CMS",
            "default": "Image"
          },
          "createMode": {
            "type": "string",
            "description": "How to handle name conflicts during creation",
            "enum": ["AUTO_RENAME", "OVERWRITE", "FAIL_IF_EXISTS"],
            "default": "AUTO_RENAME"
          },
          "inputs": {
            "type": "array",
            "description": "Input parameters for this step. Requires an 'image' type input containing the image URL.",
            "items": {
              "$ref": "#/definitions/inOutConfig"
            }
          },
          "outputs": {
            "type": "array",
            "description": "Output parameters from this step. By default, created object info will be stored in 'object'.",
            "items": {
              "$ref": "#/definitions/inOutConfig"
            }
          }
        }
      },
      "EDAPI_OBJECT_CONTENT": {
        "type": "object",
        "description": "Retrieve content for an object through EDAPI",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["EDAPI_OBJECT_CONTENT"],
            "description": "The EDAPI_OBJECT_CONTENT step type"
          },
          "format": {
            "type": "string",
            "description": "Format of the content to retrieve",
            "default": "lowres"
          },
          "inputs": {
            "type": "array",
            "description": "Input parameters for this step. Requires a 'text' type input containing the object ID.",
            "items": {
              "$ref": "#/definitions/inOutConfig"
            }
          },
          "outputs": {
            "type": "array",
            "description": "Output parameters from this step. By default, object content will be stored as 'blob'.",
            "items": {
              "$ref": "#/definitions/inOutConfig"
            }
          }
        }
      },
      "OPENAI_COMPLETION": {
        "type": "object",
        "description": "Generate completions using OpenAI's API",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["OPENAI_COMPLETION"],
            "description": "The OPENAI_COMPLETION step type"
          },
          "instruction": {
            "type": "string",
            "description": "User prompt for the AI request. Supports template expressions with {{ }} syntax."
          },
          "behavior": {
            "type": "string",
            "description": "System prompt that defines the AI's behavior"
          },
          "model": {
            "type": "string",
            "description": "Model identifier to use (e.g., gpt-4, gpt-3.5-turbo)"
          },
          "service": {
            "type": "string",
            "description": "Service name to use (references a service from SERVICES section)"
          },
          "response_format": {
            "oneOf": [
              {
                "type": "string",
                "enum": ["list", "json"],
                "description": "Simple response format specification"
              },
              {
                "type": "object",
                "description": "Schema for structured output",
                "required": ["name", "schema"],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the schema"
                  },
                  "schema": {
                    "type": "object",
                    "description": "JSON schema definition"
                  }
                }
              }
            ]
          }
        }
      },
      "OPENAI_TRANSCRIPTION": {
        "type": "object",
        "description": "Transcribe audio to text using OpenAI's Whisper model",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["OPENAI_TRANSCRIPTION"],
            "description": "The OPENAI_TRANSCRIPTION step type"
          },
          "instruction": {
            "type": "string",
            "description": "Optional prompt to guide the transcription"
          },
          "language": {
            "type": "string",
            "description": "Language code for the audio content"
          },
          "temperature": {
            "type": "number",
            "description": "Temperature for transcription model",
            "minimum": 0,
            "maximum": 1
          },
          "service": {
            "type": "string",
            "description": "Service name to use (references a service from SERVICES section)"
          }
        }
      },
      "OPENAI_SPEECH": {
        "type": "object",
        "description": "Convert text to speech using OpenAI's text-to-speech API",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["OPENAI_SPEECH"],
            "description": "The OPENAI_SPEECH step type"
          },
          "model": {
            "type": "string",
            "description": "Speech model to use (default: tts-1)",
            "default": "tts-1"
          },
          "voice": {
            "type": "string",
            "description": "Voice to use for speech (e.g., alloy, echo, fable, etc.)",
            "default": "alloy"
          },
          "response_format": {
            "type": "string",
            "description": "Audio format for output",
            "enum": ["mp3", "opus", "aac", "flac"],
            "default": "mp3"
          },
          "speed": {
            "type": "number",
            "description": "Speed multiplier for the speech",
            "default": 1.0
          },
          "mime_type": {
            "type": "string",
            "description": "MIME type for the output audio file",
            "default": "audio/mp3"
          },
          "service": {
            "type": "string",
            "description": "Service name to use (references a service from SERVICES section)"
          }
        }
      },
      "OPENAI_IMAGE_GENERATION": {
        "type": "object",
        "description": "Generate images using OpenAI's DALL-E API",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["OPENAI_IMAGE_GENERATION"],
            "description": "The OPENAI_IMAGE_GENERATION step type"
          },
          "model": {
            "type": "string",
            "description": "Image generation model to use (default: dall-e-3)",
            "default": "dall-e-3"
          },
          "size": {
            "type": "string",
            "description": "Size of the generated image",
            "enum": [
              "1024x1024",
              "1792x1024",
              "1024x1792",
              "512x512",
              "256x256"
            ],
            "default": "1024x1024"
          },
          "quality": {
            "type": "string",
            "description": "Quality of the generated image",
            "enum": ["standard", "hd"],
            "default": "standard"
          },
          "n": {
            "type": "integer",
            "description": "Number of images to generate",
            "default": 1
          },
          "style": {
            "type": "string",
            "description": "Style of the generated image",
            "enum": ["natural", "vivid"],
            "default": "natural"
          },
          "service": {
            "type": "string",
            "description": "Service name to use (references a service from SERVICES section)"
          }
        }
      },
      "HUB_IMAGE_GENERATION": {
        "type": "object",
        "description": "Generate images using AI Hub's image generation API",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["HUB_IMAGE_GENERATION"],
            "description": "The HUB_IMAGE_GENERATION step type"
          },
          "model": {
            "type": "string",
            "description": "Image generation model to use (default: dall-e-3)",
            "default": "dall-e-3"
          },
          "size": {
            "type": "string",
            "description": "Size of the generated image",
            "enum": [
              "1024x1024",
              "1792x1024",
              "1024x1792",
              "512x512",
              "256x256"
            ],
            "default": "1024x1024"
          },
          "quality": {
            "type": "string",
            "description": "Quality of the generated image",
            "enum": ["standard", "hd"],
            "default": "standard"
          },
          "n": {
            "type": "integer",
            "description": "Number of images to generate",
            "default": 1
          },
          "style": {
            "type": "string",
            "description": "Style of the generated image",
            "enum": ["natural", "vivid"],
            "default": "natural"
          },
          "service": {
            "type": "string",
            "description": "Service name to use (references a service from SERVICES section)"
          }
        }
      },
      "AZURE_OPENAI_COMPLETION": {
        "type": "object",
        "description": "Generate completions using Azure OpenAI's API",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["AZURE_OPENAI_COMPLETION"],
            "description": "The AZURE_OPENAI_COMPLETION step type"
          },
          "instruction": {
            "type": "string",
            "description": "User prompt for the AI request. Supports template expressions with {{ }} syntax."
          },
          "behavior": {
            "type": "string",
            "description": "System prompt that defines the AI's behavior"
          },
          "service": {
            "type": "string",
            "description": "Service name to use (references a service from SERVICES section)"
          },
          "response_format": {
            "oneOf": [
              {
                "type": "string",
                "enum": ["list", "json"],
                "description": "Simple response format specification"
              },
              {
                "type": "object",
                "description": "Schema for structured output",
                "required": ["name", "schema"],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the schema"
                  },
                  "schema": {
                    "type": "object",
                    "description": "JSON schema definition"
                  }
                }
              }
            ]
          }
        }
      },
      "AZURE_OPENAI_TRANSCRIPTION": {
        "type": "object",
        "description": "Transcribe audio to text using Azure OpenAI's API",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["AZURE_OPENAI_TRANSCRIPTION"],
            "description": "The AZURE_OPENAI_TRANSCRIPTION step type"
          },
          "instruction": {
            "type": "string",
            "description": "Optional prompt to guide the transcription"
          },
          "language": {
            "type": "string",
            "description": "Language code for the audio content"
          },
          "temperature": {
            "type": "number",
            "description": "Temperature for transcription model",
            "minimum": 0,
            "maximum": 1
          },
          "service": {
            "type": "string",
            "description": "Service name to use (references a service from SERVICES section)"
          }
        }
      },
      "AZURE_OPENAI_SPEECH": {
        "type": "object",
        "description": "Convert text to speech using Azure OpenAI's API",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["AZURE_OPENAI_SPEECH"],
            "description": "The AZURE_OPENAI_SPEECH step type"
          },
          "model": {
            "type": "string",
            "description": "Speech model to use (default: tts-1)",
            "default": "tts-1"
          },
          "voice": {
            "type": "string",
            "description": "Voice to use for speech (e.g., alloy, echo, fable, etc.)",
            "default": "alloy"
          },
          "response_format": {
            "type": "string",
            "description": "Audio format for output",
            "enum": ["mp3", "opus", "aac", "flac"],
            "default": "mp3"
          },
          "speed": {
            "type": "number",
            "description": "Speed multiplier for the speech",
            "default": 1.0
          },
          "mime_type": {
            "type": "string",
            "description": "MIME type for the output audio file",
            "default": "audio/mp3"
          },
          "service": {
            "type": "string",
            "description": "Service name to use (references a service from SERVICES section)"
          }
        }
      },
      "AZURE_OPENAI_IMAGE_GENERATION": {
        "type": "object",
        "description": "Generate images using Azure OpenAI's API",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["AZURE_OPENAI_IMAGE_GENERATION"],
            "description": "The AZURE_OPENAI_IMAGE_GENERATION step type"
          },
          "model": {
            "type": "string",
            "description": "Image generation model to use",
            "default": "dall-e-3"
          },
          "size": {
            "type": "string",
            "description": "Size of the generated image",
            "enum": [
              "1024x1024",
              "1792x1024",
              "1024x1792",
              "512x512",
              "256x256"
            ],
            "default": "1024x1024"
          },
          "quality": {
            "type": "string",
            "description": "Quality of the generated image",
            "enum": ["standard", "hd"],
            "default": "standard"
          },
          "n": {
            "type": "integer",
            "description": "Number of images to generate",
            "default": 1
          },
          "style": {
            "type": "string",
            "description": "Style of the generated image",
            "enum": ["natural", "vivid"],
            "default": "natural"
          },
          "service": {
            "type": "string",
            "description": "Service name to use (references a service from SERVICES section)"
          }
        }
      },
      "BRIGHTER_AI": {
        "type": "object",
        "description": "Anonymize faces and license plates in images using BrighterAI's API",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["BRIGHTER_AI"],
            "description": "The BRIGHTER_AI step type"
          },
          "service": {
            "type": "string",
            "description": "Service name to use (references a service from SERVICES section)"
          },
          "params": {
            "type": "object",
            "description": "Parameters for BrighterAI API",
            "properties": {
              "face": {
                "type": "boolean",
                "description": "Whether to detect and blur faces",
                "default": true
              },
              "license_plate": {
                "type": "boolean",
                "description": "Whether to detect and blur license plates",
                "default": true
              },
              "region": {
                "type": "string",
                "description": "Region for license plate detection",
                "enum": ["germany", "eu", "usa", "uk"]
              }
            }
          },
          "inputs": {
            "type": "array",
            "description": "Input parameters for this step. Requires a 'blob' type input for the image to process.",
            "items": {
              "$ref": "#/definitions/inOutConfig"
            }
          }
        }
      },
      "WORD_CLEANUP": {
        "type": "object",
        "description": "Clean up Word document content pasted from clipboard",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["WORD_CLEANUP"],
            "description": "The WORD_CLEANUP step type"
          },
          "tagsToRemove": {
            "type": "array",
            "description": "Tags to be completely removed from the content",
            "items": {
              "type": "string"
            }
          },
          "tagsToStrip": {
            "type": "array",
            "description": "Tags to strip while keeping their content",
            "items": {
              "type": "string"
            }
          },
          "attributesToRemove": {
            "type": "array",
            "description": "Attributes to be removed from any tag",
            "items": {
              "type": "string"
            }
          },
          "tagMap": {
            "type": "object",
            "description": "Mapping of tags to be replaced with other tags",
            "additionalProperties": {
              "type": "string"
            }
          },
          "classToTagMap": {
            "type": "object",
            "description": "Mapping of class+tag combinations to replacement tags",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "IMAGE_PICKER": {
        "type": "object",
        "description": "Display a UI for the user to select an image from a list of options",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["IMAGE_PICKER"],
            "description": "The IMAGE_PICKER step type"
          },
          "promptText": {
            "type": "string",
            "description": "Text to display in the image selection dialog"
          }
        }
      },
      "HUB_YOUTUBE_AUTH_INIT": {
        "type": "object",
        "description": "Initiate YouTube authentication process",
        "required": ["step", "account"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["HUB_YOUTUBE_AUTH_INIT"],
            "description": "The HUB_YOUTUBE_AUTH_INIT step to start the authentication process for YouTube"
          },
          "account": {
            "type": "string",
            "description": "The account to be used for authentication - see configuration in ProActions Hub"
          },
          "omitOpenAuth": {
            "type": "boolean",
            "description": "Prevent opening the authentication URL in a new tab"
          }
        }
      },
      "HUB_YOUTUBE_AUTH_LOGOUT": {
        "type": "object",
        "description": "Logout from YouTube",
        "required": ["step", "account"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["HUB_YOUTUBE_AUTH_LOGOUT"],
            "description": "The HUB_YOUTUBE_AUTH_LOGOUT step to logout an account from YouTube"
          },
          "account": {
            "type": "string",
            "description": "The account to be used for logout - see configuration in ProActions Hub"
          }
        }
      },
      "HUB_YOUTUBE_AUTH_STATUS": {
        "type": "object",
        "description": "Returns the status of your YouTube authentication",
        "required": ["step", "account"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["HUB_YOUTUBE_AUTH_STATUS"],
            "description": "The HUB_YOUTUBE_AUTH_STATUS step to check the authentication status"
          },
          "account": {
            "type": "string",
            "description": "The account to be used - see configuration in ProActions Hub"
          }
        }
      },
      "HUB_YOUTUBE_UPLOAD": {
        "type": "object",
        "description": "Upload",
        "required": ["step", "account"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["HUB_YOUTUBE_UPLOAD"],
            "description": "The HUB_YOUTUBE_UPLOAD step to upload a video to YouTube"
          },
          "account": {
            "type": "string",
            "description": "The account to be used - see configuration in ProActions Hub"
          },
          "updateProgress": {
            "type": "boolean",
            "description": "Update the progress bar if it exists - see SHOW_PROGRESS"
          },
          "additionalMetadata": {
            "type": "object",
            "description": "Additional metadata for the YouTube upload"
          }
        }
      },
      "SANITIZE": {
        "type": "object",
        "description": "Cleanup a given text input",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["SANITIZE"],
            "description": "The SANITIZE step type"
          },
          "stripMarkdown": {
            "type": "boolean",
            "description": "Remove markdown code blocks from an LLM response",
            "default": "false"
          },
          "validateAndRepairXml": {
            "type": "boolean",
            "description": "Validate and repair an xml string if necessary",
            "default": "false"
          }
        }
      },
      "ELEVENLABS_TTS": {
        "type": "object",
        "description": "Use elevenlabs to generate an audio file from a text (Text-to-Speech)",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["ELEVENLABS_TTS"],
            "description": "The ELEVENLABS_TTS step type"
          },
          "model_id": {
            "type": "string",
            "description": "The elevenlabs model that will be used"
          },
          "voice_id": {
            "type": "string",
            "description": "The voice id to be used for this operation",
            "default": "21m00Tcm4TlvDq8ikWAM"
          },
          "additionalProperties": true
        }
      },
      "ELEVENLABS_STT": {
        "type": "object",
        "description": "Use elevenlabs to transcribe a given audio file to a text (Speech-to-Text)",
        "required": ["step"],
        "properties": {
          "step": {
            "type": "string",
            "enum": ["ELEVENLABS_STT"],
            "description": "The ELEVENLABS_STT step type"
          },
          "model_id": {
            "type": "string",
            "description": "The elevenlabs model that will be used",
            "default": "scribe_v1"
          },
          "voice_id": {
            "type": "string",
            "description": "The voice id to be used for this operation",
            "default": "21m00Tcm4TlvDq8ikWAM"
          },
          "additionalProperties": true
        }
      }
    },
    "inOutConfig": {
      "type": "object",
      "required": ["type", "name"],
      "description": "Defines how inputs and outputs are processed in steps",
      "properties": {
        "type": {
          "type": "string",
          "description": "The data type of the parameter",
          "enum": [
            "text",
            "json",
            "blob",
            "bytes",
            "arrayBuffer",
            "object",
            "file",
            "image",
            "list",
            "imageName"
          ]
        },
        "name": {
          "type": "string",
          "description": "The name used to store or retrieve the value in the flowContext"
        }
      }
    },
    "ui": {}
  }
}
